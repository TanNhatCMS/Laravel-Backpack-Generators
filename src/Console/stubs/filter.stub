<li filter-name="{{ $filter->name }}"
    filter-type="{{ $filter->type }}"
    filter-key="{{ $filter->key }}"
	filter-debounce="{{ $filter->options['debounce'] ?? 0 }}"
	filter-init-function="{{ $filter->options['init_function'] ?? 'init__FILTER_NAME__Filter' }}"
	class="nav-item {{ Request::get($filter->name)?'active':'' }}">
    <a class="nav-link" href="javascript:void(0);">{{ $filter->label }}</a>
  </li>


@push('after_scripts')
@bassetBlock('__FILTER_NAME__-filter.js')
    <script>
		// init function for simple filter
		function init__FILTER_NAME__Filter(filter, filterNavbar) {

			let filterName = filter.getAttribute('filter-name');
			let filterKey = filter.getAttribute('filter-key');
			let filterAnchor = filter.querySelector('a');
			let filterDebounce = filter.getAttribute('filter-debounce');
			let navBarId = filterNavbar.getAttribute('id');
			let shouldUpdateUrl = true;

			filterAnchor.addEventListener('click', async function(e) {
				e.preventDefault();

				// get the filter value
				let filterValue = filter.classList.contains('active') ? true : false;

				switch (filterValue) {
					case true:
						filterValue = null;
						break;
					default:
						filterValue = true;
				}

				if (filterValue) {
					filter.classList.add('active');
				}else{
					filter.dispatchEvent(new CustomEvent('backpack:filter:clear'));
				} 

				document.dispatchEvent(new CustomEvent('backpack:filter:changed', {
					detail: {
						filterName: filterName, 
						filterValue: filterValue, 
						shouldUpdateUrl: shouldUpdateUrl,
						debounce: filterDebounce,

					}
				}));
			});	

			// clear filter event (used here and by the Remove all filters button)
			filter.addEventListener('backpack:filter:clear', function(e) {
				if(e.detail && e.detail.clearAllFilters) {
					shouldUpdateUrl = false
				}
				filter.classList.remove('active');
			});
		};			
	</script>
@endBassetBlock
@endpush
{{-- End of Extra CSS and JS --}}
{{-- ########################################## --}}
